name: Check code for vulnerabilities and build and push docker image

on:
  push:
    branches: main
  workflow_dispatch:
  
jobs:
  CheckCodeAndStyle:
    runs-on: ubuntu-latest
    container: python:3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install flake8
        run: python3 -m pip install flake8

      - name: Check style
        run: flake8 src
        
  EditorConfigCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install editorconfig-checker
        run: pip install editorconfig-checker
        
      - name: Start checking
        run: ec

  MarkdownFilesCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install mardownlint
        run: npm install -g markdownlint-cli

      - name: Run markdownlint test
        run: markdownlint **/*.md

  HardcodedSecretsCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check for hardcoded secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  UnitTests:
    runs-on: ubuntu-latest
    container: python:3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Install dependencies
        run: pip install -r src/requirements.txt
        
      - name: Run unit tests
        run: python3 -m unittest test/app_test.py
        
  # CheckForDatabaseMigrations:
  #   runs-on: ubuntu-latest
  #   needs: ["CheckCodeAndStyle", "EditorConfigCheck", "MarkdownFilesCheck", "HardcodedSecretsCheck", "UnitTests"]
  #   services:
  #     mysql:
  #       image: mysql:8.1
  #       env:
  #         MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
  #         MYSQL_USER: ${{secrets.MYSQL_USER}}
  #         MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
  #         MYSQL_DATABASE: ${{secrets.MYSQL_DB}}
  #       options: >-
  #         --health-cmd "mysqladmin ping"
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #       ports:
  #         - 3306:3306

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
        
  #     - name: Database Migration Check
  #       run: |
  #         docker run --rm \
  #         --net="host" \
  #         -v "$(pwd)/flyway/db:/flyway/db" \
  #         -v "$(pwd)/flyway/migrations:/flyway/sql" \
  #         -v "$(pwd)/flyway/config:/flyway/conf" \
  #         redgate/flyway \
  #         -url="jdbc:mysql://localhost:3306/example?autoreconnect=true&allowPublicKeyRetrieval=true" \
  #         -user="${{secrets.MYSQL_USER}}" -password="${{secrets.MYSQL_PASSWORD}}" \
  #         migrate
  
  
  CheckForDatabaseMigrations:
    needs: ["CheckCodeAndStyle", "EditorConfigCheck", "MarkdownFilesCheck", "HardcodedSecretsCheck", "UnitTests"]
    runs-on: ubuntu-latest
    services:
      postgres:
        image: mysql:8.1
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.MYSQL_ROOT_PASSWORD}}
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
          MYSQL_DATABASE: ${{secrets.MYSQL_DB}}
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v2
      - uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: "jdbc:mysql://localhost:3306/example?autoreconnect=true&allowPublicKeyRetrieval=true"
          user: ${{secrets.MYSQL_USER}}
          password: ${{secrets.MYSQL_PASSWORD}}

  SnykTest:
    runs-on: ubuntu-latest
    needs: ["CheckForDatabaseMigrations"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Run Snyk to check for vulnerabilities
        working-directory: ${{github.workspace}}/src
        run: |
          pip install -r requirements.txt
          npm install -g snyk
          snyk auth ${{secrets.SNYK_TOKEN}}
          snyk test
          
  SonarCloudTest:
    runs-on: ubuntu-latest
    needs: ["CheckForDatabaseMigrations"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }} 
  
  TrivyScan:
    runs-on: ubuntu-latest
    needs: ["SnykTest", "SonarCloudTest"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an image
        run: docker build -t "python_app:v1.0" .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'python_app:v1.0'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL, HIGH'

  BuildAndPushImage:
    runs-on: ubuntu-latest
    needs: ["TrivyScan"]   
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get tag
        uses: tenhaus/get-release-or-tag@v2
        id: tag

      - name: Build an image
        run: docker build -t "python_app:${{ steps.tag.outputs.tag }}" .
          
      - name: Tag an image
        run: docker tag python_app:${{ steps.tag.outputs.tag }} nikolaykostandiev/modern_devops_practices:${{ steps.tag.outputs.tag }}

      - name: Push an image to DockerHub
        run: docker push nikolaykostandiev/modern_devops_practices:${{ steps.tag.outputs.tag }}
    
